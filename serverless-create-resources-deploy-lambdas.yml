service: aws-serverless-typescript-api
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, "dev"}
  region: us-east-1
  httpApi:
    authorizers:
      Authorizer:
        payloadVersion: '2.0'
        enableSimpleResponses: true
        type: request
        functionName: authorizer
  environment:
    TABLE_NAME: ${file(./serverless.env.yml):${self:provider.stage}.table}
    JWT_SECRET: ${file(./serverless.env.yml):${self:provider.stage}.jwt_secret}

  iamRoleStatements:
  - Effect: "Allow"
    Action:
    - "dynamodb:BatchGetItem"
    - "dynamodb:ConditionCheckItem"
    - "dynamodb:GetItem"
    - "dynamodb:PutItem"
    - "dynamodb:Query"
    - "dynamodb:UpdateItem"
    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${file(./serverless.env.yml):${self:provider.stage}.table}"

plugins:
- serverless-offline
- serverless-plugin-typescript

package:
  patterns:
  - '!jest.config.ts'
  - '!tests/**'
  - "!.github/**"
  - "!Insomnia_2023-09-03.json"
  - "!archtiecture-api-movie.png"
  - '!build/tests/**'
  - '!build/tests/jest.config.js'
  - '!build/tests/jest.config.js.map'

functions:
  authorizer:
    handler: functions/Auth.authorizer

  updateSerie:
    handler: functions/Serie.updateSerie
    timeout: 10
    events:
    - httpApi:
        path: /series/{id}
        method: put
        authorizer:
          name: Authorizer

  getSerieById:
    handler: functions/Serie.getSerieById
    timeout: 10
    events:
    - httpApi:
        path: /series/{id}
        method: get
        authorizer:
          name: Authorizer

  getSeries:
    handler: functions/Serie.getSeries
    events:
    - httpApi:
        path: /series
        method: get
        authorizer:
          name: Authorizer

  createSerie:
    handler: functions/Serie.createSerie
    events:
    - httpApi:
        path: /series
        method: post
        authorizer:
          name: Authorizer

  createSeason:
    handler: functions/Season.createSeason
    events:
    - httpApi:
        path: /series/{id}/seasons
        method: post
        authorizer:
          name: Authorizer

  updateSeason:
    handler: functions/Season.updateSeason
    events:
    - httpApi:
        path: /series/{serieId}/seasons/{id}
        method: put
        authorizer:
          name: Authorizer

  createEpisode:
    handler: functions/Episode.createEpisode
    events:
    - httpApi:
        path: /series/{serieId}/seasons/{seasonId}/episodes
        method: post
        authorizer:
          name: Authorizer

  updateEpisode:
    handler: functions/Episode.updateEpisode
    events:
    - httpApi:
        path: /series/{serieId}/seasons/{seasonId}/episodes/{id}
        method: put
        authorizer:
          name: Authorizer

  createPlatform:
    handler: functions/Platform.createPlatform
    events:
    - httpApi:
        path: /series/{id}/platforms
        method: post
        authorizer:
          name: Authorizer

  updatePlatform:
    handler: functions/Platform.updatePlatform
    events:
    - httpApi:
        path: /series/{serieId}/platforms/{id}
        method: put
        authorizer:
          name: Authorizer

  createActor:
    handler: functions/Actor.createActor
    events:
    - httpApi:
        path: /series/{id}/actors
        method: post
        authorizer:
          name: Authorizer

  updateActor:
    handler: functions/Actor.updateActor
    events:
    - httpApi:
        path: /series/{serieId}/actors/{id}
        method: put
        authorizer:
          name: Authorizer

  createUser:
    handler: functions/Auth.createUser
    events:
    - httpApi:
        path: /auth/users
        method: post

  authenticate:
    handler: functions/Auth.authenticate
    events:
    - httpApi:
        path: /auth/users/login
        method: post

resources:
  Resources:
    MoviesTable:
      DeletionPolicy: Retain
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./serverless.env.yml):${self:provider.stage}.table}
        AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
        BillingMode: "PAY_PER_REQUEST"
